{
    "0.md": "<!-- markdownlint-disable MD004 MD033 MD034 -->\n\n<div align=\"center\">\n\n# Last Player On The Left\n\n</div>\n<p align=\"center\">\n\t<img alt=\"GitHub\" src=\"https://img.shields.io/github/license/Wombatlord/last-player-on-the-left?logo=Github&logoColor=green\">\n\t<img alt=\"GitHub\" src=\"https://img.shields.io/github/last-commit/Wombatlord/last-player-on-the-left?color=purple&logo=github&logoColor=purple\">\n\t<img alt=\"GitHub\" src=\"https://img.shields.io/github/languages/top/Wombatlord/last-player-on-the-left?label=Go&logo=go\">\n\t<img alt=\"GitHub\" src=\"https://img.shields.io/github/go-mod/go-version/Wombatlord/last-player-on-the-left?logo=go\"></p>\n\n## Introduction\nLast Player On The Left is a simple, cross-platform podcast player written in Go and designed for the terminal.\n\n## Features\n- Terminal UI\n- Subscribe to RSS feeds\n- Stream episodes from subscribed feeds.\n- No dependancies on third-party players such as VLC.\n\n## Installation\nTo build from source, clone the repo and run `go build` in the project root.\n\n## Usage\n\n### Subscribing to a feed\nSubscribing to an RSS Feed saves the provided feed alias & url in **config.yaml**.\nAliases & Feeds can be manually added, or passed through on the command line.\n\nAdding a feed via the commandline will then run Last Player, if you want to add multiple feeds & aliases at once, this should currently be done manually in **config.yaml**.\n\nAlias is a user provided name for a given podcast.\n\n`./last-player-on-the-left.exe $ALIAS -s $URL`\n\nThe following will subscribe to Last Podcast On The Left, associating the alias LPOTL to the feed and saving this information in config.yaml.\n\n`./last-player-on-the-left.exe LPOTL -s https://feeds.simplecast.com/dCXMIpJz`\n\n### UI & Playback Controls\nOnce Last Player is running, key presses will be passed through to the panel with focus.\n\n- `TAB` or `Left / Right Arrow Keys` will change focus between panels.\n- `Enter` will interact with a highlighted element in a panel:\n\t- If the `Podcasts` panel has focus, `Enter` will populate the `Episodes` panel.\n\t- If the `Episodes` panel has focus, `Enter` will begin playback of the selected episode.\n- `P` will pause or resume the currently playing episode, doesn't depend on focus.",
    "1.md": "<!-- markdownlint-disable MD004 MD033 MD034 -->\n\n<div align=\"center\">\n\n# Photerm\n\n</div>\n<p align=\"center\">\n\t<img alt=\"GitHub\" src=\"https://img.shields.io/github/license/Wombatlord/Photerm?logo=Github&logoColor=green\">\n\t<img alt=\"GitHub\" src=\"https://img.shields.io/github/go-mod/go-version/Wombatlord/photerm?logo=go\"></p>\n\n## Introduction\nPhoterm is a command line interface tool for interacting with images from within the terminal. \n\n## Features\n- Render images in the terminal.\n- Load & render a sequence of images.\n- Rescale images.\n- Rotate the hue across images.\n- Render images with different character sets.\n\n## Installation\nTo use Photerm, clone the repo and run `go run main.go` in the project root, along with the path to an image you wish to render.\n\n## Usage\nPhoterm has various CLI arguments for altering the output.\n\nTo save the output, simply redirect it to a txt file. The image can then be rerendered any time by printing the file in the terminal.\n\n```\nUsage: main [--scale SCALE] [--wide-boyz WIDE-BOYZ] [--in] [--mode MODE] [--Charset CHARSET] [--custom CUSTOM] [--y-org Y-ORG] [--height HEIGHT] [--x-org X-ORG] [--width WIDTH] [--hue HUE] [--fps FPS] [PATH]\n\nPositional arguments:\n  PATH                   file path for an image\n\nOptions:\n  --scale SCALE, -s SCALE\n                         overall image scale [default: 1.0]\n  --wide-boyz WIDE-BOYZ, -w WIDE-BOYZ\n                         How wide you want it guv? (Widens the image) [default: 1.0]\n  --in, -i               read from stdin\n  --mode MODE, -m MODE   mode selection determines renderer [default: A]\n  --Charset CHARSET, -c CHARSET\n                         Charset selection determines the character set used by the renderer [default: 0]\n  --custom CUSTOM        provide a custom string to render with [default: \u2588]\n  --y-org Y-ORG          minimum Y, top of focus [default: 0]\n  --height HEIGHT        height, vertical size of focus [default: 0]\n  --x-org X-ORG          minimum X, left edge of focus [default: 0]\n  --width WIDTH          width, width of focus [default: 0]\n  --hue HUE              hue rotation angle in radians [default: 0.0]\n  --fps FPS              Provide an integer number of frames per second as an upper limit to the playback speed\n```\n",
    "2.md": "# Mandlebars\n\nA fractal generator that doubles as a total conversion mod to turn your computer into a fan heater.\n\n## Usage\n\n```bash\nUsage: mandlebars [--iter ITER] [--pixel-width PIXEL-WIDTH] [--pixel-height PIXEL-HEIGHT] [--display-height DISPLAY-HEIGHT] [--exp EXP] [--center-real CENTER-REAL] [--center-imag CENTER-IMAG] [--height HEIGHT] [--freq FREQ] [--hue HUE] [--alpha-decay ALPHA-DECAY] [--stdout] <command> [<args>]\n\nOptions:\n  --iter ITER            The number of iterations to apply z -> z^2 + c. The actual number of iterations for a pixel is at most this value, less if it doesn't come out black. [default: 64]\n  --pixel-width PIXEL-WIDTH\n                         The number of pixels per row [default: 1920]\n  --pixel-height PIXEL-HEIGHT\n                         The number of rows of pixels [default: 1080]\n  --display-height DISPLAY-HEIGHT\n                         Uses goiv to display an image [default: -1]\n  --exp EXP              The mandlebrot set has exponent 2 (i.e. x -> z^2 + c) but we can try others! [default: 2]\n  --center-real CENTER-REAL, -r CENTER-REAL\n                         The real (x axis) part of the complex number corresponding to the centre of the image [default: -1.0]\n  --center-imag CENTER-IMAG, -i CENTER-IMAG\n                         The imaginary (y axis) part of the complex number corresponding to the centre of the image [default: 0.0]\n  --height HEIGHT, -h HEIGHT\n                         The height of the imaged region of the complex plane (not the resolution). [default: 2.0]\n  --freq FREQ, -f FREQ   How fast the hue varies, a smaller value means more uniform colour, more iterations means more variation close to the boundary. [default: 1.0]\n  --hue HUE              The absolute hue offset. This is periodic such that --hue=1 and --hue=0 are the same. [default: 0.0]\n  --alpha-decay ALPHA-DECAY\n                         A value between 0 and 1, where 0.5 means that the nth colour has (0.5)^n times 100% alpha. i.e. the colours fade close to the boundary. A value of 1 is no decay. [default: 1.0]\n  --stdout               The image data will be output to stdout\n  --help, -h             display this help and exit\n\nCommands:\n  load                   Load image spec json from path\n  dump                   Dump options to arg spec json file. Dumps defaults if no options are set\n  to                     Saves the image to the specified path\n```\n\n## Example\n\n\n```bash\ngo run main.go --iter=40000 --height=0.004 -r 0.28 -i -0.01 --pixel-width=6880 --pixel-height=2880 --freq=0.02 --hue=0.4\n```\n**Warning**: This takes a long time and a LOT of compute, but it's pretty though.\n\n\n![example.png](doc/iter-40k-centre-0.28r0.01i-height-0.004-freq-0.02-hue0.4.png)\n\n\n### Writing to a File\n\nThe `to` subcommand will output resulting file to the destination passed.\n\n```bash\ngo run main.go to /tmp/mandlebars.png\n```\n\n### Saving & Loading Image Specifications\n\nThe `load` and `dump` commands are designed to allow you to save a json file that you can load later to regenerate an image if all of those\nhuge image files get a bit cumbersome!\n\nTo dump to json\n\n```bash\ngo run main.go --iter=40000 --height=0.004 -r 0.28 -i -0.01 --pixel-width=6880 --pixel-height=2880 --freq=0.02 --hue=0.4 dump spec.json\n2022/07/06 15:54:24 Dumping...\n208  bytes\n2022/07/06 15:54:24 Done\n```\n\nTo load from json\n\n```bash\ngo run main.go load spec.json\n```\n\n",
    "3.md": "# St_Germain\n\nA python project for learning about working with an API.\nImplemented in python with discord.py.\n\nUses https://rws-cards-api.herokuapp.com/ for tarot data.\n\n## Database Management\n\nThe database management CLI for St Germaine is known as golem. Golem can be invoked in the following ways:\n\n\n### Flush\nTo drop and replace the database schema:\n```shell\npython golem.py flush\n```\n__WARNING__: This will purge any data currently in the database!\n\n### Run Migrations\nTo run pending migrations:\n```shell\npython golem.py migrate\n```\n\n"
}